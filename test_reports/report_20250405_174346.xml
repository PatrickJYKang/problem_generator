<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="6" skipped="11" tests="47" time="1.275" timestamp="2025-04-05T17:43:47.523402-07:00" hostname="Mac.lan"><testcase classname="tests.unit.test_basic" name="test_addition" time="0.005" /><testcase classname="tests.unit.test_basic" name="test_string_methods" time="0.003" /><testcase classname="tests.unit.test_db_operations.TestDatabaseOperations" name="test_db_connection" time="0.012" /><testcase classname="tests.unit.test_db_operations.TestDatabaseOperations" name="test_problem_storage" time="0.014" /><testcase classname="tests.unit.test_db_operations.TestDatabaseOperations" name="test_multi_language_support" time="0.003" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_init_creates_cache_dir" time="0.003" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_cache_path" time="0.004" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_is_cache_valid_expired" time="0.006" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_is_cache_valid_fresh" time="0.007" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_api_success" time="0.006"><failure message="AssertionError: assert '' == 'Hello World'&#10;  &#10;  - Hello World">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x105abf620&gt;, mock_get = &lt;MagicMock name='get' id='4420638752'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x1077d9a60&gt;

    @patch('requests.get')
    def test_get_file_content_api_success(self, mock_get, fetcher):
        """Test successful API request for file content"""
        # Setup mock response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"content": "SGVsbG8gV29ybGQ=", "encoding": "base64"}  # "Hello World" in base64
        mock_get.return_value = mock_response
    
        # Execute
        content = fetcher.get_file_content("path/to/file.md", use_cache=False)
    
        # Verify
&gt;       assert content == "Hello World"
E       AssertionError: assert '' == 'Hello World'
E         
E         - Hello World

tests/unit/test_github_utils.py:94: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_raw_fallback" time="0.006"><failure message="AssertionError: assert '' == 'Hello World'&#10;  &#10;  - Hello World">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x10777c0e0&gt;, mock_get = &lt;MagicMock name='get' id='4420494656'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x1077b66f0&gt;

    @patch('requests.get')
    def test_get_file_content_raw_fallback(self, mock_get, fetcher):
        """Test fallback to raw content when API fails"""
        # Setup mock responses
        api_response = MagicMock()
        api_response.status_code = 403  # API rate limited
    
        raw_response = MagicMock()
        raw_response.status_code = 200
        raw_response.text = "Hello World"
    
        mock_get.side_effect = [api_response, raw_response]
    
        # Execute
        content = fetcher.get_file_content("path/to/file.md", use_cache=False)
    
        # Verify
&gt;       assert content == "Hello World"
E       AssertionError: assert '' == 'Hello World'
E         
E         - Hello World

tests/unit/test_github_utils.py:115: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_uses_cache" time="0.013" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_list_directory" time="0.003" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_json_content" time="0.006"><failure message="json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x10777c590&gt;, mock_get = &lt;MagicMock name='get' id='4420967920'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x10781af60&gt;

    @patch('requests.get')
    def test_get_json_content(self, mock_get, fetcher):
        """Test retrieving and parsing JSON content"""
        # Setup mock response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"content": "eyJrZXkiOiAidmFsdWUifQ==", "encoding": "base64"}  # {"key": "value"} in base64
        mock_get.return_value = mock_response
    
        # Execute
&gt;       json_data = fetcher.get_json_content("path/to/file.json", use_cache=False)

tests/unit/test_github_utils.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
github_utils.py:257: in get_json_content
    return json.loads(content)
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:346: in loads
    return _default_decoder.decode(s)
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:337: in decode
    obj, end = self.raw_decode(s, idx=_w(s, 0).end())
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;json.decoder.JSONDecoder object at 0x10568be90&gt;, s = '', idx = 0

    def raw_decode(self, s, idx=0):
        """Decode a JSON document from ``s`` (a ``str`` beginning with
        a JSON document) and return a 2-tuple of the Python
        representation and the index in ``s`` where the document ended.
    
        This can be used to decode a JSON document from a string that may
        have extraneous data at the end.
    
        """
        try:
            obj, end = self.scan_once(s, idx)
        except StopIteration as err:
&gt;           raise JSONDecodeError("Expecting value", s, err.value) from None
E           json.decoder.JSONDecodeError: Expecting value: line 1 column 1 (char 0)

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/decoder.py:355: JSONDecodeError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_lessons_with_index_json" time="0.004"><failure message="AssertionError: assert 'welcome' in {'advanced': {'Classes and Objects': 'Classes and Objects', 'Functions': 'Functions', '_order': ['Functions', 'Classes and Objects']}}">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x10777c770&gt;, mock_get_json = &lt;MagicMock name='get_json_content' id='4420899504'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x107819340&gt;

    @patch.object(GitHubFetcher, 'get_json_content')
    def test_get_lessons_with_index_json(self, mock_get_json, fetcher):
        """Test getting lessons when index.json exists"""
        # Setup mock response
        mock_get_json.return_value = {
            "welcome": {
                "Hello, World!": "Hello, World!",
                "Variables and Types": "Variables and Types"
            },
            "advanced": {
                "Functions": "Functions",
                "Classes and Objects": "Classes and Objects"
            }
        }
    
        # Execute
        lessons = fetcher.get_lessons("learnpython.org", "en")
    
        # Verify
&gt;       assert "welcome" in lessons
E       AssertionError: assert 'welcome' in {'advanced': {'Classes and Objects': 'Classes and Objects', 'Functions': 'Functions', '_order': ['Functions', 'Classes and Objects']}}

tests/unit/test_github_utils.py:200: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_lessons_fallback_to_custom_structure" time="0.005"><failure message="AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.">self = &lt;MagicMock name='get_json_content' id='4420905552'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:923: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x10777c950&gt;, mock_get_json = &lt;MagicMock name='get_json_content' id='4420905552'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x10781a9f0&gt;

    @patch.object(GitHubFetcher, 'get_json_content')
    def test_get_lessons_fallback_to_custom_structure(self, mock_get_json, fetcher):
        """Test falling back to custom structure when index.json fails"""
        # Setup mock response to fail
        mock_get_json.side_effect = Exception("File not found")
    
        # Execute with a language that has a custom structure
        lessons = fetcher.get_lessons("learn-cpp.org", "en")
    
        # Verify
        assert "basics" in lessons
        assert "advanced" in lessons
        assert "Hello, World!" in lessons["basics"]
        assert "Pointers" in lessons["advanced"]
&gt;       mock_get_json.assert_called_once()
E       AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.

tests/unit/test_github_utils.py:220: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_build_syllabus" time="0.005"><failure message="assert None is not None">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x10777cb30&gt;, mock_get_file = &lt;MagicMock name='get_file_content' id='4420895040'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x1078181a0&gt;

    @patch.object(GitHubFetcher, 'get_file_content')
    def test_build_syllabus(self, mock_get_file, fetcher):
        """Test building a syllabus from markdown files"""
        # Setup mock responses for multiple files
        mock_get_file.side_effect = [
            "Content of Hello World",
            "Content of Variables",
            "Content of Loops"
        ]
    
        # Mock the get_lessons method
        with patch.object(fetcher, 'get_lessons', return_value={
            "basics": {
                "_order": ["Hello World", "Variables", "Loops", "Functions"],
                "Hello World": "Hello World",
                "Variables": "Variables",
                "Loops": "Loops",
                "Functions": "Functions"
            }
        }):
            # Execute - build syllabus up to "Loops"
            syllabus_path = fetcher.build_syllabus("Loops", "learnpython.org", "en")
    
            # Verify
&gt;           assert syllabus_path is not None
E           assert None is not None

tests/unit/test_github_utils.py:246: AssertionError</failure></testcase><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_templates[python-def solution():\n    pass\n\n# Your code here\n-Python code execution]" time="0.004" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_templates[java-public class Main {\n    public static void main(String[] args) {\n        // Your code here\n    }\n}-Java code execution]" time="0.004" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_templates[cpp-#include &lt;iostream&gt;\n\nint main() {\n    // Your code here\n    return 0;\n}-C++ code execution]" time="0.004" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_execution_commands[python-None-python]" time="0.003" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_execution_commands[java-javac-java]" time="0.003" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_execution_commands[cpp-g++-None]" time="0.004" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_file_properties[python-.py-None]" time="0.005" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_file_properties[java-.java-Main]" time="0.003" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_language_file_properties[cpp-.cpp-None]" time="0.004" /><testcase classname="tests.unit.test_language_capabilities.TestLanguageCapabilities" name="test_multi_language_test_cases" time="0.004" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[python-print(1 + 2)-3\n]" time="0.004"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[python-print('Hello, World!')-Hello, World!\n]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[python-a = 10\nb = 20\nprint(a + b)-30\n]" time="0.002"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[java-\n        public class Main {\n            public static void main(String[] args) {\n                System.out.println(1 + 2);\n            }\n        }\n        -3\n]" time="0.002"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[java-\n        public class Main {\n            public static void main(String[] args) {\n                System.out.println(&quot;Hello, World!&quot;);\n            }\n        }\n        -Hello, World!\n]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[cpp-\n        #include &lt;iostream&gt;\n        int main() {\n            std::cout &lt;&lt; (1 + 2) &lt;&lt; std::endl;\n            return 0;\n        }\n        -3\n]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_execution[cpp-\n        #include &lt;iostream&gt;\n        int main() {\n            std::cout &lt;&lt; &quot;Hello, World!&quot; &lt;&lt; std::endl;\n            return 0;\n        }\n        -Hello, World!\n]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:17: Requires Flask application context and mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_validation[python-testcases0-expected_results0-a, b = map(int, input().split())\nprint(a + b)]" time="0.002"><skipped type="pytest.skip" message="Requires Flask application context and proper mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:133: Requires Flask application context and proper mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_validation[python-testcases1-expected_results1-a, b = map(int, input().split())\nprint(a + b)]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and proper mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:133: Requires Flask application context and proper mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_validation[java-testcases2-expected_results2-\n            import java.util.Scanner;\n            \n            public class Main {\n                public static void main(String[] args) {\n                    Scanner scanner = new Scanner(System.in);\n                    int a = scanner.nextInt();\n                    int b = scanner.nextInt();\n                    System.out.println(a + b);\n                }\n            }\n            ]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and proper mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:133: Requires Flask application context and proper mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_code_validation[cpp-testcases3-expected_results3-\n            #include &lt;iostream&gt;\n            \n            int main() {\n                int a, b;\n                std::cin &gt;&gt; a &gt;&gt; b;\n                std::cout &lt;&lt; a + b &lt;&lt; std::endl;\n                return 0;\n            }\n            ]" time="0.003"><skipped type="pytest.skip" message="Requires Flask application context and proper mock setup">/Users/patrickkang/Documents/code/problem_generator/tests/unit/test_language_support.py:133: Requires Flask application context and proper mock setup</skipped></testcase><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_file_association[python-.py]" time="0.006" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_file_association[java-.java]" time="0.006" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_file_association[cpp-.cpp]" time="0.007" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_commands[python-None-execution_commands0]" time="0.003" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_commands[java-javac-execution_commands1]" time="0.004" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_language_commands[cpp-g++-execution_commands2]" time="0.004" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_json_testcase_format[python-json_testcase0]" time="0.005" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_json_testcase_format[java-json_testcase1]" time="0.004" /><testcase classname="tests.unit.test_language_support.TestLanguageSupport" name="test_json_testcase_format[cpp-json_testcase2]" time="0.004" /></testsuite></testsuites>