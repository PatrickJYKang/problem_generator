<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="13" failures="0" skipped="0" tests="13" time="1.652" timestamp="2025-04-05T17:44:12.036060-07:00" hostname="Mac.lan"><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_serve_index" time="0.006"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x106c58c80&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106cd9760&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_lessons" time="0.005"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x106cdbc50&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d55400&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_generate_problem" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105159790&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d57350&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_check_code_endpoint" time="0.005"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105159820&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d557c0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_run_code_endpoint" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105159220&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d56ab0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_problems_endpoint" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105158590&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106da4320&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_problems_filtered_by_lesson" time="0.008"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105158a70&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106cdbda0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_problem_by_id" time="0.005"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105117e30&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d56f30&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_problem_not_found" time="0.005"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x1051176b0&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d57c80&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_get_solutions" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x1051178f0&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106da5250&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_delete_problem" time="0.003"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105117c50&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106da65d0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_delete_problem_not_found" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x1051176e0&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106da5eb0&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase><testcase classname="tests.api.test_api_endpoints.TestAPIEndpoints" name="test_chatbot_endpoint" time="0.004"><error message="failed on setup with &quot;AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'&quot;">self = &lt;tests.api.test_api_endpoints.TestAPIEndpoints object at 0x105147fe0&gt;

    @pytest.fixture
    def app(self):
        """Create and configure a Flask app for testing"""
        # Configure app for testing
        flask_app.config.update({
            "TESTING": True,
        })
    
        # Create a test database in a temporary file
        _, test_db_path = tempfile.mkstemp()
    
        # Override DB path for testing
&gt;       with patch('db.DATABASE', test_db_path):

tests/api/test_api_endpoints.py:30: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1458: in __enter__
    original, local = self.get_original()
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

self = &lt;unittest.mock._patch object at 0x106d55c10&gt;

    def get_original(self):
        target = self.getter()
        name = self.attribute
    
        original = DEFAULT
        local = False
    
        try:
            original = target.__dict__[name]
        except (AttributeError, KeyError):
            original = getattr(target, name, DEFAULT)
        else:
            local = True
    
        if name in _builtins and isinstance(target, ModuleType):
            self.create = True
    
        if not self.create and original is DEFAULT:
&gt;           raise AttributeError(
                "%s does not have the attribute %r" % (target, name)
            )
E           AttributeError: &lt;module 'db' from '/Users/patrickkang/Documents/code/problem_generator/db.py'&gt; does not have the attribute 'DATABASE'

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:1431: AttributeError</error></testcase></testsuite></testsuites>