<?xml version="1.0" encoding="utf-8"?><testsuites><testsuite name="pytest" errors="0" failures="6" skipped="0" tests="12" time="1.182" timestamp="2025-04-05T17:29:47.783506-07:00" hostname="Mac.lan"><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_init_creates_cache_dir" time="0.007" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_cache_path" time="0.008" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_is_cache_valid_expired" time="0.006" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_is_cache_valid_fresh" time="0.007" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_api_success" time="0.006"><failure message="AssertionError: assert &lt;MagicMock name='get().text' id='4702168096'&gt; == 'Hello World'">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x1185019a0&gt;, mock_get = &lt;MagicMock name='get' id='4703252368'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x11855f260&gt;

    @patch('requests.get')
    def test_get_file_content_api_success(self, mock_get, fetcher):
        """Test successful API request for file content"""
        # Setup mock response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"content": "SGVsbG8gV29ybGQ=", "encoding": "base64"}  # "Hello World" in base64
        mock_get.return_value = mock_response
    
        # Execute
        content = fetcher.get_file_content("path/to/file.md", use_cache=False)
    
        # Verify
&gt;       assert content == "Hello World"
E       AssertionError: assert &lt;MagicMock name='get().text' id='4702168096'&gt; == 'Hello World'

tests/unit/test_github_utils.py:94: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_raw_fallback" time="0.006"><failure message="AssertionError: assert '' == 'Hello World'&#10;  &#10;  - Hello World">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x118501610&gt;, mock_get = &lt;MagicMock name='get' id='4703667936'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x1185c45c0&gt;

    @patch('requests.get')
    def test_get_file_content_raw_fallback(self, mock_get, fetcher):
        """Test fallback to raw content when API fails"""
        # Setup mock responses
        api_response = MagicMock()
        api_response.status_code = 403  # API rate limited
    
        raw_response = MagicMock()
        raw_response.status_code = 200
        raw_response.text = "Hello World"
    
        mock_get.side_effect = [api_response, raw_response]
    
        # Execute
        content = fetcher.get_file_content("path/to/file.md", use_cache=False)
    
        # Verify
&gt;       assert content == "Hello World"
E       AssertionError: assert '' == 'Hello World'
E         
E         - Hello World

tests/unit/test_github_utils.py:115: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_file_content_uses_cache" time="0.014" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_list_directory" time="0.004" /><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_json_content" time="0.007"><failure message="TypeError: the JSON object must be str, bytes or bytearray, not MagicMock">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x118501520&gt;, mock_get = &lt;MagicMock name='get' id='4705323968'&gt;, fetcher = &lt;github_utils.GitHubFetcher object at 0x118758b30&gt;

    @patch('requests.get')
    def test_get_json_content(self, mock_get, fetcher):
        """Test retrieving and parsing JSON content"""
        # Setup mock response
        mock_response = MagicMock()
        mock_response.status_code = 200
        mock_response.json.return_value = {"content": "eyJrZXkiOiAidmFsdWUifQ==", "encoding": "base64"}  # {"key": "value"} in base64
        mock_get.return_value = mock_response
    
        # Execute
&gt;       json_data = fetcher.get_json_content("path/to/file.json", use_cache=False)

tests/unit/test_github_utils.py:175: 
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 
github_utils.py:257: in get_json_content
    return json.loads(content)
_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ 

s = &lt;MagicMock name='get().text' id='4702170592'&gt;, cls = None, object_hook = None, parse_float = None, parse_int = None, parse_constant = None, object_pairs_hook = None, kw = {}

    def loads(s, *, cls=None, object_hook=None, parse_float=None,
            parse_int=None, parse_constant=None, object_pairs_hook=None, **kw):
        """Deserialize ``s`` (a ``str``, ``bytes`` or ``bytearray`` instance
        containing a JSON document) to a Python object.
    
        ``object_hook`` is an optional function that will be called with the
        result of any object literal decode (a ``dict``). The return value of
        ``object_hook`` will be used instead of the ``dict``. This feature
        can be used to implement custom decoders (e.g. JSON-RPC class hinting).
    
        ``object_pairs_hook`` is an optional function that will be called with the
        result of any object literal decoded with an ordered list of pairs.  The
        return value of ``object_pairs_hook`` will be used instead of the ``dict``.
        This feature can be used to implement custom decoders.  If ``object_hook``
        is also defined, the ``object_pairs_hook`` takes priority.
    
        ``parse_float``, if specified, will be called with the string
        of every JSON float to be decoded. By default this is equivalent to
        float(num_str). This can be used to use another datatype or parser
        for JSON floats (e.g. decimal.Decimal).
    
        ``parse_int``, if specified, will be called with the string
        of every JSON int to be decoded. By default this is equivalent to
        int(num_str). This can be used to use another datatype or parser
        for JSON integers (e.g. float).
    
        ``parse_constant``, if specified, will be called with one of the
        following strings: -Infinity, Infinity, NaN.
        This can be used to raise an exception if invalid JSON numbers
        are encountered.
    
        To use a custom ``JSONDecoder`` subclass, specify it with the ``cls``
        kwarg; otherwise ``JSONDecoder`` is used.
        """
        if isinstance(s, str):
            if s.startswith('\ufeff'):
                raise JSONDecodeError("Unexpected UTF-8 BOM (decode using utf-8-sig)",
                                      s, 0)
        else:
            if not isinstance(s, (bytes, bytearray)):
&gt;               raise TypeError(f'the JSON object must be str, bytes or bytearray, '
                                f'not {s.__class__.__name__}')
E               TypeError: the JSON object must be str, bytes or bytearray, not MagicMock

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/json/__init__.py:339: TypeError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_lessons_with_index_json" time="0.005"><failure message="AssertionError: assert 'welcome' in {'advanced': {'Classes and Objects': 'Classes and Objects', 'Functions': 'Functions', '_order': ['Functions', 'Classes and Objects']}}">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x118501670&gt;, mock_get_json = &lt;MagicMock name='get_json_content' id='4703674032'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x1185c64e0&gt;

    @patch.object(GitHubFetcher, 'get_json_content')
    def test_get_lessons_with_index_json(self, mock_get_json, fetcher):
        """Test getting lessons when index.json exists"""
        # Setup mock response
        mock_get_json.return_value = {
            "welcome": {
                "Hello, World!": "Hello, World!",
                "Variables and Types": "Variables and Types"
            },
            "advanced": {
                "Functions": "Functions",
                "Classes and Objects": "Classes and Objects"
            }
        }
    
        # Execute
        lessons = fetcher.get_lessons("learnpython.org", "en")
    
        # Verify
&gt;       assert "welcome" in lessons
E       AssertionError: assert 'welcome' in {'advanced': {'Classes and Objects': 'Classes and Objects', 'Functions': 'Functions', '_order': ['Functions', 'Classes and Objects']}}

tests/unit/test_github_utils.py:200: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_get_lessons_fallback_to_custom_structure" time="0.004"><failure message="AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.">self = &lt;MagicMock name='get_json_content' id='4703671344'&gt;

    def assert_called_once(self):
        """assert that the mock was called only once.
        """
        if not self.call_count == 1:
            msg = ("Expected '%s' to have been called once. Called %s times.%s"
                   % (self._mock_name or 'mock',
                      self.call_count,
                      self._calls_repr()))
&gt;           raise AssertionError(msg)
E           AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.

/Library/Frameworks/Python.framework/Versions/3.12/lib/python3.12/unittest/mock.py:923: AssertionError

During handling of the above exception, another exception occurred:

self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x11855c9b0&gt;, mock_get_json = &lt;MagicMock name='get_json_content' id='4703671344'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x1185c5640&gt;

    @patch.object(GitHubFetcher, 'get_json_content')
    def test_get_lessons_fallback_to_custom_structure(self, mock_get_json, fetcher):
        """Test falling back to custom structure when index.json fails"""
        # Setup mock response to fail
        mock_get_json.side_effect = Exception("File not found")
    
        # Execute with a language that has a custom structure
        lessons = fetcher.get_lessons("learn-cpp.org", "en")
    
        # Verify
        assert "basics" in lessons
        assert "advanced" in lessons
        assert "Hello, World!" in lessons["basics"]
        assert "Pointers" in lessons["advanced"]
&gt;       mock_get_json.assert_called_once()
E       AssertionError: Expected 'get_json_content' to have been called once. Called 0 times.

tests/unit/test_github_utils.py:220: AssertionError</failure></testcase><testcase classname="tests.unit.test_github_utils.TestGitHubFetcher" name="test_build_syllabus" time="0.005"><failure message="assert None is not None">self = &lt;tests.unit.test_github_utils.TestGitHubFetcher object at 0x11855ccb0&gt;, mock_get_file = &lt;MagicMock name='get_file_content' id='4703249296'&gt;
fetcher = &lt;github_utils.GitHubFetcher object at 0x11855df70&gt;

    @patch.object(GitHubFetcher, 'get_file_content')
    def test_build_syllabus(self, mock_get_file, fetcher):
        """Test building a syllabus from markdown files"""
        # Setup mock responses for multiple files
        mock_get_file.side_effect = [
            "Content of Hello World",
            "Content of Variables",
            "Content of Loops"
        ]
    
        # Mock the get_lessons method
        with patch.object(fetcher, 'get_lessons', return_value={
            "basics": {
                "_order": ["Hello World", "Variables", "Loops", "Functions"],
                "Hello World": "Hello World",
                "Variables": "Variables",
                "Loops": "Loops",
                "Functions": "Functions"
            }
        }):
            # Execute - build syllabus up to "Loops"
            syllabus_path = fetcher.build_syllabus("Loops", "learnpython.org", "en")
    
            # Verify
&gt;           assert syllabus_path is not None
E           assert None is not None

tests/unit/test_github_utils.py:246: AssertionError</failure></testcase></testsuite></testsuites>